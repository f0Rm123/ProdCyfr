@page "/"
@using ProduktCyfrowy.Dialogs;
@using QRCoder;
@inject RoomContext dbContext
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject Auth auth

<PageTitle>Sale</PageTitle>

@if(!loggedIn)
{
    if(!loginDialogVisible)
    {
        <MudButton OnClick="ShowLoginDialog" Variant="Variant.Filled" Color="Color.Info">Zaloguj</MudButton>
    }
}
else
{
    <MudButton OnClick="ShowAddRoomDialog" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary">
        Dodaj sale
    </MudButton>

    <MudDataGrid Items="@rooms">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Sale</MudText>
            <MudSpacer />
        </ToolBarContent>
        <Columns>
            <TemplateColumn>
                <CellTemplate>
                    <MudButton Href="@GetHrefFromRoomName(context.Item.Name)" Color="Color.Primary" Variant="Variant.Outlined">
                        Kalendarz
                    </MudButton>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => GetBuildingFromRoomName(x.Name)" Title="Budynek"/>
            <PropertyColumn Property="x => GetRoomFromRoomName(x.Name)" Title="Numer sali" />
            <PropertyColumn Property="x => GetComputersAvailableText(x.ComputersAvailable)" Title="Komputery dostępne" />
            <PropertyColumn Property="x => x.NumberOfSeats" Title="Miejsca" />
            <PropertyColumn Property="x => x.SupervisorFullName()" Title="Nadzorujący" />
            <TemplateColumn T="Room">
                <CellTemplate>
                    <MudButton Color="Color.Primary" Variant="Variant.Outlined">
                        <a href="data:text/;base64, @Convert.ToBase64String(GetQrCode(context.Item.Name))" download="@GetQrCodeFileName(context.Item.Name)">Pobierz QR</a>
                    </MudButton>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="Room">
                <CellTemplate>
                    <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="() => RemoveRoom(context.Item.Id)">
                        Usuń salę
                    </MudButton>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@code {
    List<Room> rooms { get; set; } = new();
    QRCodeGenerator qrGenerator = new();

    bool loggedIn = false;
    async Task<bool> IsLoggedIn() => await auth.IsLoggedIn();

    bool loginDialogVisible = false;
    string GetComputersAvailableText(bool value) => value ? "TAK" : "NIE";
    string GetQrCodeFileName(string name) => name.Replace(" ", "") + ".png";
    string GetHrefFromRoomName(string name) => navigationManager.BaseUri + "room/" + name;
    string GetBuildingFromRoomName(string name) => name.Split('_').First();
    string GetRoomFromRoomName(string name) => name.Split('_').Last();

    void UpdatePage()
    {
        rooms = dbContext.Rooms.ToList();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            loggedIn = await IsLoggedIn();
            if(loggedIn)
            {
                UpdatePage();
            }
        }
    }

    async Task ShowLoginDialog()
    {
        loginDialogVisible = true;
        var dialog = await dialogService.ShowAsync<LoginDialog>();
        var result = await dialog.Result;
        if(!result.Canceled)
        {
            await auth.Login();
        }
        loginDialogVisible = false;
        UpdatePage();
    }

    byte[] GetQrCode(string data)
    {
        using QRCodeData qrCodeData = qrGenerator.CreateQrCode(GetHrefFromRoomName(data), QRCodeGenerator.ECCLevel.Q);
        using PngByteQRCode qrCode = new PngByteQRCode(qrCodeData);
        return qrCode.GetGraphic(20);
    }

    async Task ShowAddRoomDialog()
    {
        var dialog = await dialogService.ShowAsync<AddRoomDialog>();
        var result = await dialog.Result;
        UpdatePage();
    }

    async Task RemoveRoom(Guid id)
    {
        var parameters = new DialogParameters<SimpleAcceptDialog>();
        parameters.Add("ContentText", "Czy na pewno chcesz usunąć tę salę?");
        parameters.Add("AcceptText", "Tak, usuń");
        parameters.Add("CancelText", "Nie, zachowaj");
        var dialog = await dialogService.ShowAsync<SimpleAcceptDialog>("Usuwanie sali", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            dbContext.Rooms.Remove(dbContext.Rooms.Where(a => a.Id == id).First());
            await dbContext.SaveChangesAsync();
            UpdatePage();
        }
    }
}