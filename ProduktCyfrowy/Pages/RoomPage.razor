@page "/room/{RoomName}"
@inject NavigationManager navigationManager
@inject RoomContext dbContext

<PageTitle>@GetTitle()</PageTitle>


<div>

    <MudButton Href="@navigationManager.BaseUri" Color="Color.Primary" Variant="Variant.Outlined">Powróć</MudButton>
   

    <div style="float:right;">
        <MudButton Href="@navigationManager.BaseUri" Color="Color.Success" Variant="Variant.Outlined">Dodaj rezerwację</MudButton>
    </div>
</div>

<MudText Style="margin: 15px 0px 15px 0px;font-weight:bold;">@GetRoomDescription()</MudText>

<MudCalendar Items="_events" item >
    <CellTemplate>
         <div style="width: 100%; height: 100%; border: 2px solid @GetColor(((CustomItem)context).Color)">
            <div style="display:flex;flex-direction:row;background-color: @GetColor(((CustomItem)context).Color)">
                <MudText Style="color: #ffffff;" Typo="Typo.body1" Align="Align.Center">@(((CustomItem)context).Title)</MudText>
                
                @if (((CustomItem)context).CanDelete)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"  aria-label="Usuń rezerwację"></MudIconButton>
                }
            </div>
                
        </div> 
    </CellTemplate>
</MudCalendar>

@code {
    [Parameter]
    [EditorRequired]
    public string RoomName { get; set; }

    string GetTitle() => "Sala " + RoomName;
    string GetRoomDescription()
    {
        var room = dbContext.Rooms.FirstOrDefault(r => r.Name == RoomName);
        return room is null ? "" : $"Sala {RoomName}, Liczba miejsc: {room.NumberOfSeats}, Czy są komputery: {(room.ComputersAvailable ? "TAK" : "NIE")}, Nadzorca sali: { room.SupervisorFullName()}";
    }

    private string GetColor(Color color) => $"var(--mud-palette-{color.ToDescriptionString()})";

    private List<CustomItem> _events = new()
    {
        new CustomItem
        {
            Start = DateTime.Today.AddHours(10),
            End = DateTime.Today.AddHours(11),
            Title = "Rezerwacja : dOminik DDDDDDD",
            Location = "Over here",
            Text = "This is an event today",
            Color = Color.Info,
        },
        new CustomItem
        {
            Start = DateTime.Today.AddDays(2).AddHours(11),
            End = DateTime.Today.AddDays(2).AddHours(12.5),
            Title = "Rezerwacja : dOminik DDDDDDD",
            Location = "Over there",
            Text = "This is an event tomorrow",
            Color = Color.Success,
            CanDelete =true
        }
    };

    private class CustomItem : CalendarItem
    {
        public string Title { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
        public Color Color { get; set; } = Color.Primary;
        public bool CanDelete { get; set; } = false;
    }

   

    string calendarData
    {
        get
        {
            return "";
            // return dbContext.Rooms.First(a => a.Name == RoomName).Reservations;
        }
    }
}
