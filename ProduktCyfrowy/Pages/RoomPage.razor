@page "/room/{RoomName}"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using ProduktCyfrowy.Dialogs;
@inject NavigationManager navigationManager
@inject RoomContext dbContext
@inject IDialogService dialogService
@inject Auth auth
@inject ProtectedSessionStorage protectedSessionStorage

<PageTitle>@GetTitle()</PageTitle>

@if (!loggedIn)
{
    if(!loginDialogVisible)
    {
        <MudButton OnClick="ShowLoginDialog" Variant="Variant.Filled" Color="Color.Info">Zaloguj</MudButton>
    }
}
else
{
    <div>
        <MudButton Href="@navigationManager.BaseUri" Color="Color.Primary" Variant="Variant.Outlined">Sale</MudButton>

        <div style="float:right;">
            <MudButton OnClick="ShowAddReservationDialog" Variant="Variant.Filled" Color="Color.Primary">Dodaj rezerwację</MudButton>
        </div>
    </div>

    <MudText Style="margin: 15px 0px 15px 0px;font-weight:bold;">@GetRoomDescription()</MudText>

    <MudCalendar Items="_events" item>
        <CellTemplate>
            <div style="width: 100%; height: 100%; margin: 4px; background-color: @GetColor(((CustomItem)context).Color)">
                @if (((CustomItem)context).CanDelete)
                {
                    <div style="width:100%">


                        <MudIconButton Style="float:right" OnClick="() => RemoveReservation(((CustomItem)context).Id)" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="Usuń rezerwację"></MudIconButton>
                </div>
                }
                <div style="text-align:center;display:flex;padding:1px;flex-direction:row;width:100%;background-color: @GetColor(((CustomItem)context).Color)">
                    <MudText Style="color: #ffffff;width:100%" Typo="Typo.body1" Align="Align.Center">Rezerwacja: <strong> @(((CustomItem)context).Title)</strong></MudText>
                
                    
                </div>

                <div style="text-align:center;display:flex;padding:1px;width:100%;flex-direction:row;background-color: @GetColor(((CustomItem)context).Color)">
                    <MudText Style="color: #ffffff;width:100%" Typo="Typo.body1" Align="Align.Center">godz: @(((CustomItem)context).ReservationTime)</MudText>

                    
                </div>

            </div>
        </CellTemplate>
    </MudCalendar>
}

@code {
    [Parameter]
    [EditorRequired]
    public string RoomName { get; set; }
    bool loggedIn = false;
    async Task<bool> IsLoggedIn() => await auth.IsLoggedIn();
    bool loginDialogVisible = false;
    string GetTitle() => "Sala " + RoomName;
    string GetRoomDescription()
    {
        var room = dbContext.Rooms.FirstOrDefault(r => r.Name == RoomName);
        return room is null ? "" : $"Sala {RoomName}, Liczba miejsc: {room.NumberOfSeats}, Czy są komputery: {(room.ComputersAvailable ? "TAK" : "NIE")}, Nadzorca sali: {room.SupervisorFullName()}";
    }

    private string GetColor(Color color) => $"var(--mud-palette-{color.ToDescriptionString()})";

    private List<CustomItem> _events = new List<CustomItem>();


    async Task GetCalendarData()
    {
        var room = dbContext.Rooms.FirstOrDefault(r => r.Name == RoomName);
        var userId = (await protectedSessionStorage.GetAsync<Guid>("userId")).Value;
        _events = await GetEvents();
    }

    async Task<List<CustomItem >> GetEvents() {
        var room = dbContext.Rooms.FirstOrDefault(r => r.Name == RoomName);
        var userId = (await protectedSessionStorage.GetAsync<Guid>("userId")).Value;
        var isAdmin = (await protectedSessionStorage.GetAsync<bool>("isAdmin")).Value;
        return dbContext.Reservations.Where(r => r.RoomId == room.Id).Select(s => new CustomItem()
    {
        Id = s.Id,
        Start = s.DateFrom,
            End = s.DateTo,
            Title = s.User.FirstName + " " + s.User.LastName,
            Color = s.UserId == userId ? Color.Success : Color.Info,
                ReservationTime = s.DateFrom.ToString("HH:mm") + " - " + s.DateTo.ToString("HH:mm"),
                CanDelete = s.UserId == userId || isAdmin
        }).ToList();
    }
    // new()
    // {
    //     new CustomItem
    //     {
    //         Start = DateTime.Today.AddHours(10),
    //         End = DateTime.Today.AddHours(11),
    //         Title = "Rezerwacja : dOminik DDDDDDD",
    //         Location = "Over here",
    //         Text = "This is an event today",
    //         Color = Color.Info,
    //     },
    //     new CustomItem
    //     {
    //         Start = DateTime.Today.AddDays(2).AddHours(11),
    //         End = DateTime.Today.AddDays(2).AddHours(12.5),
    //         Title = "Rezerwacja : dOminik DDDDDDD",
    //         Location = "Over there",
    //         Text = "This is an event tomorrow",
    //         Color = Color.Success,
    //         CanDelete =true
    //     }
    // };

    private class CustomItem : CalendarItem
    {
        public Guid Id{ get; set; }
        public string Title { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
        public Color Color { get; set; } = Color.Primary;
        public bool CanDelete { get; set; } = false;
        public string ReservationTime { get; set; } = "";
    }

    async Task ShowAddReservationDialog()
    {
        var dialog = await dialogService.ShowAsync<AddReservationDialog>();
        var room = dbContext.Rooms.FirstOrDefault(r => r.Name == RoomName);
        ((AddReservationDialog)dialog.Dialog).RoomId = room.Id;
        var result = await dialog.Result;
        if (!result.Cancelled)
            UpdatePage();
    }

    async Task UpdatePage()
    {
        // rooms = dbContext.Rooms.ToList();
        await GetCalendarData();
        StateHasChanged();
    }

    string calendarData
    {
        get
        {
            return "";
            // return dbContext.Rooms.First(a => a.Name == RoomName).Reservations;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loggedIn = await IsLoggedIn();
            if (loggedIn)
            {
                await UpdatePage();
                StateHasChanged();
            }

        }
    }

    async Task ShowLoginDialog()
    {
        var aa = dbContext.Users.ToList();
        loginDialogVisible = true;
        var dialog = await dialogService.ShowAsync<LoginDialog>();
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var userId = ((LoginDialog)dialog.Dialog).UserId;
            var isAdmin = ((LoginDialog)dialog.Dialog).IsAdmin;
            await auth.Login(userId, isAdmin);
        }
        loginDialogVisible = false;
        StateHasChanged();
    }


    async Task RemoveReservation(Guid id)
    {
        var parameters = new DialogParameters<SimpleAcceptDialog>();
        parameters.Add("ContentText", "Czy na pewno chcesz usunąć daną rezerwację?");
        parameters.Add("AcceptText", "Tak, usuń");
        parameters.Add("CancelText", "Nie, zachowaj");
        var dialog = await dialogService.ShowAsync<SimpleAcceptDialog>("Usuwanie rezerwacji", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            dbContext.Reservations.Remove(dbContext.Reservations.Where(a => a.Id == id).First());
            await dbContext.SaveChangesAsync();
            UpdatePage();
        }
    }

}
