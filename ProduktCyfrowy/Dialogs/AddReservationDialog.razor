@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using ProduktCyfrowy
@inject RoomContext dbContext
@inject ProtectedSessionStorage protectedSessionStorage
@inject ISnackbar Snackbar
<MudPaper>
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Rezerwacja sali</MudText>
        </TitleContent>
        <DialogContent>
            <div style="display:flex;flex-direction:row;gap:10px;">
                <MudDatePicker  @ref="@dateField" Label="Data*"></MudDatePicker>
            </div>

            <div class="time-picker" style="display:flex;gap:10px;">
                <MudTimePicker @ref="@timeFromField" Label="Godzina od*"></MudTimePicker>
                <MudTimePicker @ref="@timeToField" Label="Godzina do*"></MudTimePicker>
            </div>



        </DialogContent>
        <DialogActions>
            <MudText Typo="Typo.body2">*wymagane pola</MudText>
            <MudButton OnClick="AddReservationForUser" Color="Color.Primary" Variant="Variant.Filled">Dodaj</MudButton>
        </DialogActions>
    </MudDialog>
</MudPaper>

@code {
    [CascadingParameter]
    MudDialogInstance dialog { get; set; }
    public Guid RoomId;

    MudDatePicker dateField;
    MudTimePicker timeToField, timeFromField;

    async Task AddReservationForUser()
    {
        bool save = true;
  
        if (dateField.Date is null)
        {
            dateField.ErrorText = "Podaj datę rozpoczęcia rezerwacji!";
            dateField.Error = true;
            save = false;
        }

        if (timeFromField.Time is null)
        {
            timeFromField.ErrorText = "Podaj czas rozpoczęcia rezerwacji!";
            timeFromField.Error = true;
            save = false;
        }



        if (timeToField.Time is null)
        {
            timeToField.ErrorText = "Podaj czas zakończenia rezerwacji!";
            timeToField.Error = true;
            save = false;
        }

        if (save)
        {
            var dateFrom = dateField.Date.Value.AddTicks(timeFromField.Time.Value.Ticks);
            var dateTo = dateField.Date.Value.AddTicks(timeToField.Time.Value.Ticks);
            if (dateTo <= dateFrom)
            {
                Snackbar.Add("Data końca rezerwacji nie moze być mniejsza od daty rozpoczęcia!", Severity.Error);
                return;
            }

            if (dbContext.Reservations.Any(r => 
                r.RoomId == RoomId &&
                (
                    (r.DateFrom <= dateFrom && r.DateTo >= dateFrom)
                    || (r.DateFrom <= dateTo && r.DateTo >= dateTo)

                    || (r.DateFrom >= dateFrom && (r.DateTo <= dateTo))
                )
            )
            
            )
            { 
                Snackbar.Add("Istnieje już rezerwacja w danym dniu w podanych godzinach!", Severity.Error);
                return;
            }

            var userId = (await protectedSessionStorage.GetAsync<Guid>("userId")).Value;



            dbContext.Add(new Reservation(Guid.NewGuid(), userId, RoomId,dateFrom,dateTo));
            dbContext.SaveChanges();
            dialog.Close();
        }
    }

    async Task AddManyRooms(IBrowserFile file)
    {
        using var stream = file.OpenReadStream();
        using var reader = new StreamReader(stream);
        string line;
        while ((line = await reader.ReadLineAsync()) != null)
        {
            if (!string.IsNullOrEmpty(line))
            {
                string[] values = line.Split(',');
                dbContext.Add(new Room()
                    {
                        Name = values[0],
                        ComputersAvailable = Convert.ToBoolean(values[1]),
                        NumberOfSeats = Convert.ToInt32(values[2]) // Trzeba dodać nową obsługę tego nadzorującego
                    });
            }
        }
        dbContext.SaveChanges();
        dialog.Close();
    }
}
